<!-- https://stackoverflow.com/questions/35610873/google-maps-with-responsive-sidebar -->
<!-- original code by geocodezip (Thank you!) -->

<!-- https://stackoverflow.com/questions/14229695/google-maps-api-throws-uncaught-referenceerror-google-is-not-defined-only-whe -->
<!-- Dr Molle answered the question of why this code was breaking at first -->

    <!-- &callback=initialize was previously &callback=initMap but didn't work -->
    <!-- I placed the google maps event within the first script, which eliminated errors -->
    <script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?key=<%=ENV["GOOGLE_API_KEY"]%>&callback=initialize&libraries=geometry&sensor=false" async defer>
    	google.maps.event.addDomListener(window, 'load', initialize);
    </script>

    <div id="wrapper">
      <!-- Sidebar -->
      <div id="sidebar-wrapper" class="btn-toolbar">
        <ul class="sidebar-nav" id="side_bar">
          <div class="container">
          <%= form_tag "/historic_sites", method: :post, class: "navbar-form navbar-left" do %>
            <div id="app" class="input-group">
                <input type="text" class="form-control" placeholder="Enter Destination" name="search_address">
                <span class="input-group-btn">
                  <button type="submit" class="btn btn-primary">Go!</button>
                </span>
            </div>
          <% end %>
          </div>
          <li class="sidebar-brand" style="font-weight: bold; color: #0B0B0B;">
              <!-- <div class="well well-sm"> -->
                <!-- <h3>Historic Sites</h3> -->
            <!-- </div> -->
          </li>
          <hr>
        </ul>
      </div>
      <!-- /#sidebar-wrapper -->
      <!-- Page Content -->
      <div id="page-content-wrapper">
          <!-- /#search form -->
          <!-- <h1><a href="#menu-toggle" class="gradient-menu" id="menu-toggle"></a></h1> -->
        <div class="container-fluid">
          <div class="row">
            <div class="col-lg-12">
              <h1><a href="#menu-toggle" class="gradient-menu" id="menu-toggle"></a></h1>
              <!--&nbsp;search results&nbsp; --><!-- a href="#menu-toggle" class="btn btn-default" >Toggle Sidebar</a -->
              <!-- you can use tables or divs for the overall layout -->
              <div id="map_canvas"></div>
              <!-- <h1>Simple Sidebar</h1> -->
            </div>
          </div>
        </div>
      </div>
      <!-- /#page-content-wrapper -->
    </div>
    <!-- /#wrapper -->

    <div id="app">
      <!-- {{ sites }}
        <div v-for="site in sites">
              <p> Name of historic site: {{ site.name }} </p>
              <hr>
        </div> -->
    </div>

    <!-- <div id="map_canvas"></div> -->

    <script>
        //the google.maps.event.addDomListener was here originally, then was moved to the bottom, but now is at the top
        // Most of the code within these script marjers could be placed in the historic_sites.js file

        var gmarkers = [];
        var map = null;

        //my variables from the other page
        var geocoder;
        var historicalSites = [];//declare this variable outside of the $.Get function
        var nycHistoricSites = [];//declare this variable outside of the $.Get function
        var allSites = [];
        var latitude = parseFloat("<%= @lat %>");//mine
        var longitude = parseFloat("<%= @lng %>");//mine
        var centerPoint = {name: "Your Location: <%= @address %>", latitude: latitude, longitude: longitude};//mine

        //convert from meters to feet
        //Used for calculating distance from center point to a pin on the map
        var convertMetersToImperial = function(meters) {
            var result = "";
            var feet = meters/0.304800609601;
            var miles = feet/5280;
            if (miles > 1) {
                result += miles.toFixed(2).toString() + " miles away"
            } else {
                result += feet.toFixed(2).toString() + " feet away"
            }
            return result;
        };

        var convertDistanceToString = function(distanceInMiles) {
            var result = "";
            var feet = distanceInMiles/5280;
            if (distanceInMiles > 1) {
                result += distanceInMiles.toFixed(2).toString() + " miles away"
            } else {
                result += feet.toFixed(2).toString() + " feet away"
            }
            return result;
        };

        var convertMetersToMiles = function(meters) {
            var result = 0;
            var feet = meters/0.304800609601;
            var miles = feet/5280;
            return result;
        };

        //function by Tharik Kanaka (Thank you!)
        //https://stackoverflow.com/questions/26836146/how-to-sort-array-items-by-longitude-latitude-distance-in-javascripts
        function calculateDistance(lat1, lon1, lat2, lon2, unit) {
            var radlat1 = Math.PI * lat1/180
            var radlat2 = Math.PI * lat2/180
            var radlon1 = Math.PI * lon1/180
            var radlon2 = Math.PI * lon2/180
            var theta = lon1-lon2
            var radtheta = Math.PI * theta/180
            var dist = Math.sin(radlat1) * Math.sin(radlat2) + Math.cos(radlat1) * Math.cos(radlat2) * Math.cos(radtheta);
            dist = Math.acos(dist)
            dist = dist * 180/Math.PI
            dist = dist * 60 * 1.1515
            if (unit=="K") { dist = dist * 1.609344 }
            if (unit=="N") { dist = dist * 0.8684 }
            return dist
        }
        //end of my variables and functions

        function initialize() {
            var myWrapper = $("#wrapper");
            $("#menu-toggle").click(function(e) {
                e.preventDefault();
                $("#wrapper").toggleClass("toggled");
                myWrapper.one('webkitTransitionEnd otransitionend oTransitionEnd msTransitionEnd transitionend', function(e) {
                  // code to execute after transition ends
                  google.maps.event.trigger(map, 'resize');
                });
            });
            // create the map
            var myOptions = {
              zoom: 10,
              center: new google.maps.LatLng(latitude, longitude),
              mapTypeControl: true,
              mapTypeControlOptions: {
              style: google.maps.MapTypeControlStyle.DROPDOWN_MENU
              },
              navigationControl: true,
              mapTypeId: google.maps.MapTypeId.ROADMAP,
              scaleControl: true,
              styles: [
                {
                    "featureType": "landscape",
                    "stylers": [
                        {
                            "saturation": -7
                        },
                        {
                            "gamma": 1.02
                        },
                        {
                            "hue": "#ffc300"
                        },
                        {
                            "lightness": -10
                        }
                    ]
                  },
                  {
                    "featureType": "road.highway",
                    "stylers": [
                        {
                            "hue": "#ffaa00"
                        },
                        {
                            "saturation": -45
                        },
                        {
                            "gamma": 1
                        },
                        {
                            "lightness": -4
                        }
                    ]
                  },
                  {
                    "featureType": "road.arterial",
                    "stylers": [
                        {
                            "hue": "#ffaa00"
                        },
                        {
                            "lightness": -10
                        },
                        {
                            "saturation": 64
                        },
                        {
                            "gamma": 0.9
                        }
                    ]
                  },
                  {
                    "featureType": "road.local",
                    "stylers": [
                        {
                            "lightness": -5
                        },
                        {
                            "hue": "#00f6ff"
                        },
                        {
                            "saturation": -40
                        },
                        {
                            "gamma": 0.75
                        }
                    ]
                  },
                  {
                    "featureType": "poi",
                    "stylers": [
                        {
                            "saturation": -30
                        },
                        {
                            "lightness": 11
                        },
                        {
                            "gamma": 0.5
                        },
                        {
                            "hue": "#ff8000"
                        }
                    ]
                  },
                  {
                    "featureType": "water",
                    "stylers": [
                        {
                            "hue": "#0077ff"
                        },
                        {
                            "gamma": 1.25
                        },
                        {
                            "saturation": -22
                        },
                        {
                            "lightness": -31
                        }
                    ]
                  }
                  ]
                //SNAZZY MAP GOES HERE!
                }
              map = new google.maps.Map(document.getElementById("map_canvas"),
              myOptions);

            google.maps.event.addListener(map, 'click', function() {
            infowindow.close();
            });

            function createCenterMarker(centerPointHash){
                //Create a center point parker that is different from the rest
                console.log(centerPointHash);
                var pinImage = new google.maps.MarkerImage("https://www.googlemapsmarkers.com/v1/009900/");
                // Create a marker and set its position.
                var marker1 = new google.maps.Marker({
                  position: {lat: centerPointHash.latitude, lng: centerPointHash.longitude},
                  title: centerPointHash.name,
                  icon: pinImage,
                  map: map
                });
                //infoWindow(marker1, map, centerPointHash);
            };

            createCenterMarker(centerPoint);

            //} //this was the original closing bracket location for initialize
            //the functions infowindow,createMarker were placed inside the initialize function by me, to make the app work

            // infowindow from this guy's code:
            var infowindow = new google.maps.InfoWindow({
              size: new google.maps.Size(150, 50),
              maxWidth: 400
            });

            // This function picks up the click and opens the corresponding info window
            function myclick(i) {
              // console.log("Inside myclick function");
              google.maps.event.trigger(gmarkers[i], "click");
            }

            //ADDRESS IMAGE SIZE AND ENLARGING
            function jsonInfoToHtml(jsonData) {
                //takes json data from one historical site and returns a string for an infowindow - REPLACES STRING CODE IN infoWindow() above
                var jsonData_url = "<h3><b><a href="+jsonData.url+" target='_blank'>"+jsonData.name+"</a></b></h3>";
                var phone = "<p>"+jsonData.phone+"</p>";
                var address = "<p>"+jsonData.address+"</p>";
                var jsonData_image_url = "<p><img class='enlarge-onhover' src="+jsonData.image_url+" alt="+jsonData.alt_image_url+"></p>";
                var jsonData_alt_image_url = "<p><img class='enlarge-onhover' src="+jsonData.alt_image_url+" alt="+jsonData.alt_image_url+"></p>";
                var jsonData_description = "<p>"+jsonData.description+"</p>";
                var html = jsonData_url+address+phone+jsonData_image_url+jsonData_description;
                //var contentString = html;
                return html;
            }

            //My own create marker function:
            function createMarker(jsonData){
                // console.log(jsonData.name + " from createMarker");
                // Create a marker and set its position.
                var point = new google.maps.LatLng(jsonData.latitude, jsonData.longitude);
                var marker = new google.maps.Marker({
                  position: point,
                  map: map, 
                  title: jsonData.name,
                  //zIndex: Math.round(latlng.lat() * -100000) << 5 //this was breaking...
                });
                //-----------------
                // Calculate distance from center to clicked destination marker return string
                var center = map.getCenter();//this comes from user input
                var markerLatLng = marker.getPosition();
                //console.log("markerLatLng:")
                //console.log(markerLatLng);
                //the distance variable may require a different google api script...
                var distance = google.maps.geometry.spherical.computeDistanceBetween(center, markerLatLng);
                var htmlDistance = "<p>"+convertMetersToImperial(distance)+"</p>";
                //-----------------
                //create html content for infowindows to display when clicked
                var html = jsonInfoToHtml(jsonData);
                var contentString = html + htmlDistance;//html used to be an argument for the function
                //-----------------

                google.maps.event.addListener(marker, 'click', function() {
                  map.setCenter(marker.getPosition());//places the infowindowat center
                  infowindow.setContent(contentString);//content string goes here...
                  infowindow.open(map, marker);
                });
                //save the info we need to use later for the side_bar
                gmarkers.push(marker);
                //add a line to the side_bar html
                var sidebar = $('#side_bar');
                var sidebar_entry = $('<li/>', {
                //'html': name, //this was the old variable from his code...
                'html': "<div>" + "<button class='btn btn-primary btn-space custom btn-block btn-lg' type='button'>" + jsonData.name + htmlDistance + "</button>" + "</div>", 
                'click': function() {
                  google.maps.event.trigger(marker, 'click');
                },
                // 'mouseenter': function() {
                //   $(this).css('color', 'red');
                // },
                // 'mouseleave': function() {
                //   $(this).css('color', '#0B0B0B');
                // }
                }).appendTo(sidebar);
            } //END createMarker()
                        //grab the (state) historical sites from my tables via my api
            $.get("/api/v1/sites", function(response) {
                // console.log('This is the $.get /api/v1/sites function in main')
                //create an array and fill it with all of the historicalSites
                historicalSites = response;
                // LOOP THROUGH HISTORICALSITES
                $.get("/api/v1/houses", function(response) {
                    // console.log('This is the $.get /api/v1/houses function in main')
                    //create an array and fill it with all of the historicalSites
                    nycHistoricSites = response;
                    // console.log("********Here are all of the sites from main!*******")
                    // console.log("historicalSites");
                    // console.log(historicalSites);
                    // console.log("nycHistoricSites");
                    // console.log(nycHistoricSites);
                    //concatenate both arrays into a new one
                    allSites = historicalSites.concat(nycHistoricSites);
                    // add distance to each object
                    for (var i = 0; i < allSites.length; i++) {
                        allSites[i]["distance"] = calculateDistance(centerPoint["latitude"],centerPoint["longitude"],allSites[i]["latitude"],allSites[i]["longitude"],"K");
                    }
                    allSites.sort(function(a, b) { 
                        return a.distance - b.distance;
                    });
                    for (var j = 0; j < allSites.length; j++) {
                      //call the function createMarker()
                      createMarker(allSites[j]);
                    }
                    // console.log("allSites");
                    // console.log(allSites);

                }.bind(this));
            }.bind(this));
        }//this is where I moved the closing bracket for initialize
        var delayMillis = 1000; //1 second
    </script>






